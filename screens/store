import React, { useContext } from 'react';
import {View, Text , StyleSheet, SafeAreaView ,TouchableOpacity} from 'react-native';
import {AuthContext} from '../../context/authContext'
import HeaderText from '../../components/HeaderText';
import FooterMenu from '../../components/Menus/FooterMenu';
import {useAuth} from '../../context/FavContext'                    
import { AntDesign } from '@expo/vector-icons';

const Favorite = () => {
    const { favorites, removeFromFavorites } = useAuth();

    const handleRemoveFavorite = (userId) => {
        removeFromFavorites(userId);
      };
    
    


    return (
        <SafeAreaView style = {{flex:1, backgroundColor: 'white'}}>
            <View style = {styles.container}>
                <Text style = {{color: '#343434', fontSize: 25, fontWeight: 'bold'}}>Your Favorites</Text>
                <AntDesign style = {{marginTop: 4}} name="heart" size={24} color="#00CCAA" />
            </View>

            <View style={{ marginBottom: '130%', paddingHorizontal: 30 }}>
                <View style={styles.background}>
                {favorites.map((profile, index) => (
                    <View key={index}>
                    <Text style={styles.info}>Name: {profile.createdBy.firstName} {profile.createdBy.lastName}</Text>
                    <Text style={styles.info}>Age: {profile.age}</Text>
                    <Text style={styles.info}>Job: {profile.job}</Text>
                    <Text style={styles.info}>Address: {profile.address}</Text>
                    <TouchableOpacity onPress={() => handleRemoveFavorite(profile.userId)}>
                        <Text style={{ color: 'red' }}>Remove from Favorites</Text>
                    </TouchableOpacity>
                    </View>
                ))}
                </View>
            </View>











            <View style = {{backgroundColor: '#ffffff', borderWidth: .5, borderColor:'gray', paddingHorizontal: 20, borderTopRightRadius: 20, borderTopLeftRadius: 20, paddingTop:5}}>
                <FooterMenu />
            </View>
        </SafeAreaView>
    );
};
const styles = StyleSheet.create({
    container:{
        flex:1,
        backgroundColor:'white',
        flexDirection: 'row',
        marginTop: 40,
        gap: 10,
        paddingHorizontal: 20,
    },
    background: {
        backgroundColor: 'black',
        borderRadius: 20,
        paddingHorizontal: 30,
        paddingVertical: 18
    },
    info:{
        color:'#00CCAA',
        fontSize: 15,
        fontWeight: '600'
    }
})
export default Favorite;


==========================


// Favorite.js
import React from 'react';
import { View, Text, StyleSheet, SafeAreaView, TouchableOpacity } from 'react-native';
import { AntDesign } from '@expo/vector-icons';
import { useAuth } from '../../context/FavContext';
import FooterMenu from '../../components/Menus/FooterMenu';

const Favorite = () => {
  const { favorites, removeFromFavorites } = useAuth();

  const handleRemoveFavorite = (userId) => {
    removeFromFavorites(userId);
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: 'white' }}>
      <View style={styles.container}>
        <Text style={{ color: '#343434', fontSize: 25, fontWeight: 'bold' }}>Your Favorites</Text>
        <AntDesign style={{ marginTop: 4 }} name="heart" size={24} color="#00CCAA" />
      </View>

      <View style={{ marginBottom: '130%', paddingHorizontal: 30 }}>
        {favorites.map((favorite, index) => (
          <View style = {styles.background} key={index}>
            {favorite.profileData && (
              <>
                <Text style={styles.info}>Name: {favorite.profileData.createdBy?.firstName} {favorite.profileData.createdBy?.lastName}</Text>
                <Text style={styles.info}>Age: {favorite.profileData.age}</Text>
                <Text style={styles.info}>Job: {favorite.profileData.job}</Text>
                <Text style={styles.info}>Address: {favorite.profileData.address}</Text>
              </>
            )}

            {favorite.profilepost && (
              <>
                <Text style={styles.info}>Name: {favorite.profilepost.postedBy?.firstName} {favorite.profilepost.postedBy?.lastName}</Text>
                <Text style={styles.info}>Location: {favorite.profilepost.postedBy?.location}</Text>
                <Text style={styles.info}>Rate: {favorite.profilepost.minRate} - {favorite.profilepost.maxRate}</Text>
                <Text style={styles.info}>Description: {favorite.profilepost.description}</Text>
              </>
            )}

            <TouchableOpacity onPress={() => handleRemoveFavorite(favorite.profileData.userId)}>
              <Text style={{ color: 'red' }}>Remove from Favorites</Text>
            </TouchableOpacity>
          </View>
        ))}
      </View>

      <View style={{ backgroundColor: '#ffffff', borderWidth: .5, borderColor: 'gray', paddingHorizontal: 20, borderTopRightRadius: 20, borderTopLeftRadius: 20, paddingTop: 5 }}>
        <FooterMenu />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    flexDirection: 'row',
    marginTop: 40,
    gap: 10,
    paddingHorizontal: 20,
  },
  info: {
    color: '#00CCAA',
    fontSize: 15,
    fontWeight: '600'
  }
});

export default Favorite;



// FavContext.js
import React, { createContext, useContext, useState } from 'react';

const FavContext = createContext();

export const FavProvider = ({ children }) => {
  const [favorites, setFavorites] = useState([]);

  const addToFavorites = (profileData) => {
    const existingIndex = favorites.findIndex(
      (fav) => fav.userId === profileData.userId
    );

    if (existingIndex !== -1) {
      // Remove from favorites if already exists
      const updatedFavorites = [...favorites];
      updatedFavorites.splice(existingIndex, 1);
      setFavorites(updatedFavorites);
    } else {
      // Add to favorites if not in the list
      setFavorites((prevFavorites) => [...prevFavorites, { ...profileData }]);
    }
  };

  const removeFromFavorites = (userId) => {
    const updatedFavorites = favorites.filter(
      (fav) => fav.userId !== userId && fav.postId !== postId
    );
    setFavorites(updatedFavorites);
  };

  const contextValue = {
    favorites,
    addToFavorites,
    removeFromFavorites,
  };

  return (
    <FavContext.Provider value={contextValue}>
      {children}
    </FavContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(FavContext);
  if (!context) {
    throw new Error('useAuth must be used within a FavProvider');
  }
  return context;
};
